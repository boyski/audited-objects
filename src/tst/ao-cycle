#!/usr/bin/perl

use strict;
use Benchmark qw(timediff timesum timestr);
use Cwd qw(getcwd realpath);
use File::Basename;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;

# Some builds are inherently non-parallel-safe for reasons that
# cannot be fixed with good prereq data. One example would be
# building an archive library incrementally with "ao -r". Therefore,
# we have to turn off parallel testing on some packages.
my $SpecialCase;
$SpecialCase->{bash}->{NOTPARALLEL} = 1;
$SpecialCase->{gdb}->{PROPERTIES}->{'Audit.Ignore.Path.RE'} =
    '/tmp\\d+\\b|\\b(\\.bak|\\.BAK)$|/conf[^i][^g]';
$SpecialCase->{openssl}->{NOTPARALLEL} = 1;
$SpecialCase->{openssl}->{PROPERTIES}->{'Aggregation.Prog.Strong.RE'} =
    '(\\bcc|gcc|gcc-.*|g[+]{2}|ccache|perl)$';
$SpecialCase->{zsh}->{PROPERTIES}->{'Aggregation.Prog.Break.RE'} =
    '<NULL>';

my($prog) = fileparse($0, '\.\w*$');

my %opt;
GetOptions(\%opt, qw(help AllModes FreshDB IdentityHash=s Jobs=i
    KeepGoing Logbase=s Make=s MF=s OutputToScreen PackageDir=s Verbose
    audited compare download parallel remake warmup));

my $logfile = ($opt{Logbase} || $prog) . '.log';

if ($opt{help}) {
    pod2usage(-exitval => 'NOEXIT');
    print "\nStandard test packages include:\n";
    print "\t$_" for <DATA>;
    exit(2);
}

$opt{AllModes} = 1
    unless $opt{warmup} || $opt{download} ||
	   $opt{remake} || $opt{parallel} || $opt{compare};

@opt{qw(warmup download remake parallel compare)} = 1 if $opt{AllModes};

$opt{audited} = 1 if $opt{download} || $opt{remake} || $opt{parallel};

if (! $opt{OutputToScreen}) {
    open(ORIG_STDERR, ">&STDERR") || die "$prog: Error: can't dup stderr\n";
    my $biglog = @ARGV ? $logfile : uc $logfile;
    open(STDOUT, ">$biglog") || die "$prog: Error: $biglog: $!\n";
    open(STDERR, ">&STDOUT") || die "$prog: Error: can't dup stdout\n";
}

$ENV{AO_IDENTITY_HASH} = $opt{IdentityHash} if $opt{IdentityHash};

my $status = 0;

my $Make = $opt{Make} || 'make';
my $app = 'ao';
my $q = $opt{Verbose} ? '' : '-q';

my $start = Benchmark->new;
my $zero = timediff($start, $start);

my $projname = 'unknown';

sub timing {
    my $delta = shift;
    my $timed = timestr($delta, 'noc', '5.1f');
    $timed =~ s%wallclock secs.*%seconds%;
    return $timed;
}

sub run {
    my $cmd = "@_";
    print STDERR "+ $cmd\n";
    my $rc = system($cmd);
    if ($rc) {
	warn "$prog: Error: BUILD OF '$projname' FAILED ($rc)\n";
	if (($rc == 512 || $rc & 127) && !$opt{KeepGoing}) {
	    exit(2);
	} else {
	    return 1;
	}
    } else {
	return 0;
    }
}

my($total_w, $total_a, $total_r, $total_p, $total_c, $total_d) =
    ($zero, $zero, $zero, $zero, $zero, $zero);

# Default to the set of known good test cases listed in the DATA section.
if (! @ARGV) {
    for (<DATA>) {
	chomp;
	my @results = glob($_);
	if (!@results && (my $dir = $opt{PackageDir})) {
	    if (my $pkg = (glob("$dir/$_"))[0]) {
		if ($pkg =~ m%\.tar\.gz$%) {
		    run(qq(gunzip -c "$pkg" | tar -xf -));
		} elsif ($pkg =~ m%\.tar\.bz2$%) {
		    run(qq(bunzip2 -c "$pkg" | tar -xf -));
		} elsif ($pkg =~ m%\.zip$%) {
		    run(qq(unzip "$pkg"));
		}
		@results = glob($_);
		for my $dir (@results) {
		    if (-f "$dir/configure") {
			run(qq(cd "$dir" && sh configure));
		    } elsif (-f "$dir/CMakeLists.txt") {
			run(qq(cd "$dir" && cmake .));
		    } elsif (-f "$dir/config") {
			run(qq(cd "$dir" && ./config));
		    }
		}
	    }
	}
	if (@results) {
	    push(@ARGV, @results);
	} else {
	    push(@ARGV, $_);
	}
    }
}

my @dirs = map { realpath($_) } @ARGV;
for my $dir (@dirs) {
    my $rc = 0;

    if (!chdir($dir)) {
	warn "$prog: Error: $dir: $!\n";
	$status++;
	next;
    }
    
    if (! -f 'Makefile') {
	warn "$prog: Error: $dir: missing Makefile\n";
	$status++;
	next;
    }

    print "========== $dir ==========\n";

    chomp(my $projbase = qx(ao property Base.Dir));
    my $projfile = "$projbase/.$app/$app.properties";
    if (! -f $projfile) {
	mkdir "$projbase/.$app" unless -d "$projbase/.$app";
	open(PROJFILE, '>', $projfile) || die "$prog: Error: $projfile: $!";
	($projname = basename($dir)) =~ s%^(\w*).*%$1%;
	print PROJFILE "Project.Name = $projname\n";
	if (exists($SpecialCase->{$projname}->{PROPERTIES})) {
	    for my $prop (keys %{$SpecialCase->{$projname}->{PROPERTIES}}) {
		print PROJFILE $prop, ": ",
		    $SpecialCase->{$projname}->{PROPERTIES}->{$prop}, "\n";
	    }
	}
	close(PROJFILE);
    }
    exit(2) if system("cat $projfile");

    chomp($projname = qx(ao property Project.Name));

    if ($opt{FreshDB}) {
	if (system("set -x; $app ADMIN delete PROJECT $projname 2>/dev/null")) {
	    $status++;
	}
    }

    my $t0 = Benchmark->new;
    my $wcmd = "$app $q -C -X -l make-w.log $Make";
    if ($opt{warmup} && run($wcmd)) {
	$rc++;
    } else {
	my $t1 = Benchmark->new;
	my $disp = $opt{download} ? "-O %p.$app" : "-o %p.$app";
	my $acmd = "$app $q -C -u $disp -m -l make-a.log $Make";
	if ($opt{audited} && run($acmd)) {
	    $rc++;
	} else {
	    my $t2a = Benchmark->new;
	    my $rcmd;
	    if ($opt{remake} && !$rc) {
		my($basedir, $audit) = qx($app substitute %b %p.$app);
		chomp($basedir, $audit);
		my $mf = $opt{MF} || 'MF';
		my $flags = qq(-out=$mf -full -members -pdump -base="$basedir");
		if (system qq(set -x; $^X -wS ao2make $flags $audit)) {
		    $rc++;
		    $status++;
		}
		$rcmd = qq($app $q -C -X -l make-r.log $Make -f $mf);
		$rcmd .= ' -j ' . $opt{Jobs} if $opt{Jobs};
	    }
	    my $t2b = Benchmark->new;
	    if ($rcmd && run($rcmd)) {
		$rc++;
	    } else {
		my $t3a = Benchmark->new;
		my $pcmd;
		if ($opt{parallel} && !$rc) {
		    if (exists($SpecialCase->{$projname}->{NOTPARALLEL})) {
			warn "NOTPARALLEL: $projname (SKIPPED)\n";
		    } else {
			my($basedir, $audit) = qx($app substitute %b %p.$app);
			chomp($basedir, $audit);
			my $md = 'MD';
			if (system "set -x; $^X -wS ao2make -MF=$md $audit") {
			    $rc++;
			    $status++;
			}
			$pcmd = qq(MAKEFILES=$md);
			$pcmd .= qq( $app $q -C -X -l make-p.log $Make);
			$pcmd .= ' -j ' . ($opt{Jobs} ? $opt{Jobs} : 4);
		    }
		}
		my $t3b = Benchmark->new;
		if ($pcmd && run($pcmd)) {
		    $rc++;
		} else {
		    my $t4 = Benchmark->new;
		    my $ccmd = "$app $q -C -X -l make-c.log $Make";
		    if ($opt{compare} && run($ccmd)) {
			$rc++;
		    } else {
			my $t5 = Benchmark->new;
			my $dcmd = "$app $q -C -r -w -l make-d.log $Make";
			if ($opt{download} && run($dcmd)) {
			    $rc++;
			} else {
			    my $t6 = Benchmark->new;
			    my @timings = ();
			    if ($opt{warmup}) {
				my $delta = timediff($t1, $t0);
				push(@timings, sprintf "%-12s   %s\n",
				    'Warmup:', timing($delta));
				$total_w = timesum($total_w, $delta);
			    }
			    if ($opt{audited}) {
				my $delta = timediff($t2a, $t1);
				push(@timings, sprintf "%-12s   %s\n",
				    'Audited:', timing($delta));
				$total_a = timesum($total_a, $delta);
			    }
			    if ($opt{remake}) {
				my $delta = timediff($t3a, $t2b);
				push(@timings, sprintf "%-12s   %s\n",
				    'Remake:', timing($delta));
				$total_r = timesum($total_r, $delta);
			    }
			    if ($opt{parallel}) {
				my $delta = timediff($t4, $t3b);
				push(@timings, sprintf "%-12s   %s\n",
				    'Parallel:', timing($delta));
				$total_p = timesum($total_p, $delta);
			    }
			    if ($opt{compare}) {
				my $delta = timediff($t5, $t4);
				push(@timings, sprintf "%-12s   %s\n",
				    'Compare:', timing($delta));
				$total_c = timesum($total_c, $delta);
			    }
			    print STDERR '=' x 74, "\n";
			    if ($opt{download}) {
				my $delta = timediff($t6, $t5);
				push(@timings, sprintf "%-12s   %s\n",
				    'Download:', timing($delta));
				$total_d = timesum($total_d, $delta);
				system qq(set -x; $app lsbuilds -l);
			    }
			    push(@timings, sprintf "%-12s   %s\n", 'Total:',
				timing(timediff($t6, $t0)));
			    unlink $logfile;
			    open(MARKER, '>', $logfile)
				|| die "$prog: Error: $logfile: $!";
			    print MARKER @timings;
			    close(MARKER);
			    print STDERR @timings;
			    print STDERR '=' x 74, "\n\n";
			}
		    }
		}
	    }
	}
    }
}

my $end = Benchmark->new;

my @summary;
push(@summary,
    sprintf "%-12s   %s\n", 'WARMUP:', timing(timediff($total_w, $zero)))
	if $opt{warmup};
push(@summary,
    sprintf "%-12s   %s\n", 'AUDITED:', timing(timediff($total_a, $zero)))
	if $opt{audited};
push(@summary,
    sprintf "%-12s   %s\n", 'REMAKE:', timing(timediff($total_r, $zero)))
	if $opt{remake};
push(@summary,
    sprintf "%-12s   %s\n", 'PARALLEL:', timing(timediff($total_p, $zero)))
	if $opt{parallel};
push(@summary,
    sprintf "%-12s   %s\n", 'COMPARE:', timing(timediff($total_c, $zero)))
	if $opt{compare};
push(@summary,
    sprintf "%-12s   %s\n", 'DOWNLOAD:', timing(timediff($total_d, $zero)))
	if $opt{download};
push(@summary,
    sprintf "%-12s   %s\n", 'TOTAL:', timing(timediff($end, $start)));

print STDERR @summary;
print ORIG_STDERR @summary unless $opt{OutputToScreen};

exit($status ? 2 : 0);

=pod

=head1 NAME

ao-cycle - A test harness for AO.

=head1 OPTIONS

   -help		Print this message and exit
   -warmup		Run a "vanilla" build first, to get caches warm
   -audited		Do an audited build, uploading results to server
   -download		Follow an audited build with a downloading build
   -parallel		Use audit to generate prereqs and rebuild with -j
   -remake		Use audit to generate and use a new Makefile
   -compare		Run a "vanilla" build last for timing comparison
   -AllModes		Perform all build modes (audited, remake, etc)
   -FreshDB		Clear the server database before beginning
   -Jobs=n		Test "remake" parallelism by using 'n' jobs
   -Keep-Going		Do not exit if a test buiuld fails
   -OutputToScreen	Send output to stdout/stderr instead of a file
   -PackageDir=d	Expand and configure tarballs from named directory
   -Verbose		Do not suppress AO verbosity

=head2 NOTES

    - With no arguments, all packages are tested in all modes.
    - All flags may be abbreviated to their shortest unique name.
    - The -AllModes flag is assumed if no specific mode is requested.
    - The -audited flag is implied by certain other modes.

=head2 EXAMPLES

    % ao-cycle -w -a -d -r -O gdb-7.0 pcre-8.02
	(builds gdb and pcre in warmup, audited, download, and remake modes)

    % ao-cycle -w -d -r
	(builds all known-and-present packages in the specified modes)

    % ao-cycle -P /path/to/packages
	(builds all known packages findable in specified dir, in all modes)

    % ao-cycle
	(builds all known-and-present packages in all modes)

=head1 DESCRIPTION

This script is a testing harness which performs a set of software
builds using the AO client, recording and measuring the results.
By default all output is written to the file './AO-CYCLE.log'.
The script contains a list of open-source packages known to build
well with AO and will build them all if no directories are specified
on the command line.

By default, all testing modes are used. Therefore, when run with no
arguments it will build all known packages (if present) in all
modes, and save output to the file noted above. See the EXAMPLES
section for sample usage.

=cut

__DATA__
autocutsel-*
bash-*
coreutils-*
curl-*
diffutils-*
gdb-*
httpd-*
indent-*
jikes-*
make-*
openssl-1.*
pcre-*
postgresql-*
qpopper*
tar-*
trio-*
wget-*
zlib-*
